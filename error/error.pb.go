// Code generated by protoc-gen-go. DO NOT EDIT.
// source: error.proto

/*
Package error is a generated protocol buffer package.

It is generated from these files:
	error.proto

It has these top-level messages:
	Request
	Response
	Error
*/
package error

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Dummy request responses
type Request struct {
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Response struct {
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// General error message that sent as grpc Metadata info
type Error struct {
	Code          int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message       string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Temporary     bool   `protobuf:"varint,3,opt,name=temporary" json:"temporary,omitempty"`
	UserErrorCode int64  `protobuf:"varint,4,opt,name=user_error_code,json=userErrorCode" json:"user_error_code,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Error) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetTemporary() bool {
	if m != nil {
		return m.Temporary
	}
	return false
}

func (m *Error) GetUserErrorCode() int64 {
	if m != nil {
		return m.UserErrorCode
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "error.Request")
	proto.RegisterType((*Response)(nil), "error.Response")
	proto.RegisterType((*Error)(nil), "error.Error")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ErrorService service

type ErrorServiceClient interface {
	TestError(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type errorServiceClient struct {
	cc *grpc.ClientConn
}

func NewErrorServiceClient(cc *grpc.ClientConn) ErrorServiceClient {
	return &errorServiceClient{cc}
}

func (c *errorServiceClient) TestError(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/error.ErrorService/TestError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ErrorService service

type ErrorServiceServer interface {
	TestError(context.Context, *Request) (*Response, error)
}

func RegisterErrorServiceServer(s *grpc.Server, srv ErrorServiceServer) {
	s.RegisterService(&_ErrorService_serviceDesc, srv)
}

func _ErrorService_TestError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorServiceServer).TestError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/error.ErrorService/TestError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorServiceServer).TestError(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ErrorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "error.ErrorService",
	HandlerType: (*ErrorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestError",
			Handler:    _ErrorService_TestError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "error.proto",
}

func init() { proto.RegisterFile("error.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0x3b, 0x8f, 0x82, 0x40,
	0x10, 0xc7, 0xb3, 0x07, 0x1c, 0xec, 0xdc, 0x83, 0x64, 0xab, 0xcd, 0xe5, 0x0a, 0x42, 0x61, 0x28,
	0x0c, 0x85, 0xb6, 0x76, 0xc6, 0x2f, 0xb0, 0xda, 0x13, 0x84, 0x89, 0xb1, 0xc0, 0xc5, 0xd9, 0xc5,
	0xc4, 0xf8, 0xe5, 0x0d, 0x83, 0x8f, 0x6e, 0x7e, 0xff, 0x49, 0xfe, 0x0f, 0xf8, 0x42, 0x22, 0x4b,
	0x65, 0x4f, 0xd6, 0x5b, 0x15, 0x31, 0xe4, 0x12, 0x62, 0x83, 0xe7, 0x01, 0x9d, 0xcf, 0x01, 0x12,
	0x83, 0xae, 0xb7, 0x27, 0x87, 0xf9, 0x0d, 0xa2, 0xcd, 0xf8, 0x57, 0x0a, 0xc2, 0xc6, 0xb6, 0xa8,
	0x45, 0x26, 0x8a, 0xc0, 0xf0, 0xad, 0x34, 0xc4, 0x1d, 0x3a, 0x57, 0x1f, 0x50, 0x7f, 0x64, 0xa2,
	0x90, 0xe6, 0x89, 0xea, 0x1f, 0xa4, 0xc7, 0xae, 0xb7, 0x54, 0xd3, 0x55, 0x07, 0x99, 0x28, 0x12,
	0xf3, 0x16, 0xd4, 0x0c, 0xd2, 0xc1, 0x21, 0x55, 0x9c, 0x5c, 0xb1, 0x6d, 0xc8, 0xb6, 0x3f, 0xa3,
	0xcc, 0x79, 0x6b, 0xdb, 0xe2, 0x62, 0x05, 0xdf, 0x0c, 0x5b, 0xa4, 0xcb, 0xb1, 0x41, 0x35, 0x07,
	0xb9, 0x43, 0xe7, 0xa7, 0x42, 0xbf, 0xe5, 0xb4, 0xe2, 0xd1, 0xfa, 0x2f, 0x7d, 0xf1, 0x54, 0x7d,
	0xff, 0xc9, 0xfb, 0x96, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x80, 0xfb, 0x47, 0xee, 0x00,
	0x00, 0x00,
}
